---
format:
  html: default
tbl-colwidths:
- 10
- 20
- 20
- 20
- 15
- 15
title: EECS7398 Weekly Schedule fa 2024

---



Since the is the first time this course is offered.

This is a tentative schedule.

The papers listed here are suggestions, if there is a different paper you would like to present, send me a link so that I can approve it.  

Either 1 or 2 people can sign up for a paper.  Once everyone has done so, I'll schedule which paper gets which date.


| session | Date    | topic  | due | discussions|
|--:|---------|--------| ----| -----------|
1| Sept 6    | [Compiler Overview](lectures/010_compiler_overview.qmd)              | |  [discussion](https://github.com/normrubin/normrubin.github.io/discussions/70)
| | | [Performance Measurement-1](lectures/01a1_performance_measurement.qmd)  | | 
2|Sept 10   | [Performance Measurement-2](lectures/01a2_performance_measurement.qmd)  | | [discussion](https://github.com/normrubin/normrubin.github.io/discussions/71)
3|Sept 13    |[Representing programs](lectures/02a_representation.qmd)| hw0 | [discussion](https://github.com/normrubin/normrubin.github.io/discussions/72)
| | | [Bril](lectures/02b_bril.qmd)| |[discussion](https://github.com/normrubin/normrubin.github.io/discussions/73)
4| Sept 20   | [Local analysis and optimization](lectures/03_local.qmd)  | | [discussion](https://github.com/normrubin/normrubin.github.io/discussions/74)
|||[Local Value Numbering](lectures/03b_local_value_numbering.qmd)
5| Sept 27   | Data flow    | | 
6| Oct 1 |Global analysis |
7| Oct 4     | Loop invariant code motion  | |
8|Oct 8 |Static single assignment |
9|Oct 11  | Norm unavailable - maybe guest lecture 
10| Oct 15  | [GPU Compilers](lectures/14_gpu_compilers.qmd)  | | 
11| Oct 22   |Global value number |
12| Oct 25   |LLVM  | |
13| Oct 29   | readings  | |
14 | Nov 1| readings  |
15| Nov 5   |[Dynamic compilers 1 ](lectures/13_dynamic_compilers.qmd) |
16| Nov 8   | [Dynamic compilers 2 ](lectures/13_dynamic_compilers.qmd)  | | 
19| Nov 12 |Classical loop optimizations |
20| Nov 15    |  readings  | | 
21| Nov 19    | readings  | | | 
22| Nov 22    | readings   | | 
| |Nov 29 | **Thanksgiving**|
23|Nov 26    |  Polyhedral analysis | | 
24| Dec 3     |readings | 
25| Dec 6     | ai in compilers  | 


Suggested Papers 

leader: [Should AI Optimize Your Code? A Comparative Study of Current Large Language Models Versus Classical Optimizing Compilers](https://arxiv.org/html/2406.12146v1)

leader: [SLaDe: A Portable Small Language Model Decompiler for Optimized Assembly](https://arxiv.org/abs/2305.12520)


leader: Sana Taghipour Anvari [Large Language Models for Compiler Optimization](https://ar5iv.labs.arxiv.org/html/2309.07062)

Leader:[ACPO: AI-Enabled Compiler-Driven Program Optimization](https://ar5iv.labs.arxiv.org/html/2312.09982)

leader: [Oscar Kellner](https://github.com/Eightscer) [Retargeting and Respecializing GPU Workloads for Performance Portability](https://ieeexplore.ieee.org/document/10444828)


leader: [Adaptive Online Context-Sensitive Inlining](https://ieeexplore.ieee.org/stamp/stamp.jsp?tp=&arnumber=1191550)

leader: Aymane El Jerari [MLIR: A Compiler Infrastructure for the End of Mooreâ€™s Law](https://arxiv.org/abs/2002.11054)

leader: [Threaded Code Variations and Optimizations](https://citeseerx.ist.psu.edu/document?repid=rep1&type=pdf&doi=e1e1a8622dc562e7f42d98b59f67de6949e2539e)

leader: Yashaswini Makaram [ProGraML: Graph-based Deep Learning for Program Optimization and Analysis](https://arxiv.org/abs/2003.10536)

leader: [TVM: An Automated End-to-End Optimizing Compiler for Deep Learning](https://www.usenix.org/conference/osdi18/presentation/chen)


leader:[Learning Compiler Pass Orders using Coreset and Normalized Value Prediction](https://ar5iv.labs.arxiv.org/html/2301.05104v1)

leader: [Qucheng Jiang](https://github.com/jiangqucheng) [An MLIR-based Compiler Flow for System-Level Design and Hardware Acceleration](https://dl.acm.org/doi/abs/10.1145/3508352.3549424)

leader: [Learning to Optimize Tensor Programs](https://arxiv.org/abs/1805.08166)

leader: [End-to-end Deep Learning of Optimization Heuristics](https://chriscummins.cc/pub/2017-pact.pdf)

leader: [Compiler Fuzzing through Deep Learning](https://chriscummins.cc/pub/2018-issta.pdf)

leader: Zhaoyang Han [Autotuning OpenCL workgroup size for stencil patterns](https://arxiv.org/pdf/1511.02490)

leader: [Generating GPU Compiler Heuristics using Reinforcement Learning](https://arxiv.org/abs/2111.12055)

leader: [Michael Maurer](https://github.com/maurermi/) [Energy-Aware Tile Size Selection for Affine Programs on GPUs](https://malithjayaweera.com/wp-content/uploads/2024/01/CGO24_eatss_PREPRINT.pdf)
