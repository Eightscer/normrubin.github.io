---
execute:
  echo: true
format:
  html: default
  revealjs:
    chalkboard: true
    code-fold: true
    code-line-numbers: true
    echo: true
    output-file: revealjs_05b_licm.qmd
    scrollable: true
    slideNumber: c/t
sidebar: false
title: loop invariant code motion

---

## licm 

Loop invariant code motion recognizes computations in loop that produce the same value on each iteration  and moves them out of the loop.

## A very common case for this is matrix addressing 

a[i,j] might expand to  to $i*4*\operatorname{stride_{a}} + j *4$ 

```
for j 
  a[i,j] = f(a[i,j+1])
```

turns into 


```
a = 
b = 
result = 0
for (){
    result += a*b
}
```

## pre steps

1. find the natural loops 
2. add pre-header 

if we are going to move code we often need to add a special basic block which is called a  landing pad or a a ***pre-header***
create a new block b.  change all the preds of the loop header to point to the pre-header, add an edge from b to the loop header

3. need reaching definitions

## licm steps 

1) find loop invariant instructions, 
2) move some of the loop invariant instructions to the pre-header 


## step 1 
An instruction instr in a loop is loop invariant of:

every operand is:

1) constant or 
1) all reaching definitions of this operand are outside of the loop
1) there is exactly one def in loop reaching this operand and that def is loop invariant 


## naturally iterative 

```
iterate to convergence
 for each instr in  the loop
  mark it as loop invar  iff 
     for all arguments x either
         all reaching defs of x are outside of the loop (this covers constants)
         or there is exactly one def of instr in the loop and that def is loop invar, and there are no uses of the dest before instr on any path in the loop
```

## step 2 

when is ok to move an instr? We call this ***safe*** to move.

::: {.columns}
::: {.column}

```{mermaid}
%%{init: {"flowchart": {"htmlLabels": false}} }%%

graph TD
   b1[" n= 0"]
   p["preheader"]
   b3
   b4["n = 2"]
   b5["m = n *2"]
   b6
   b1-->p
   p--> b3
   b3--> b4
   b4--> b5
   b3--> b5
   b5--> b3
   b5--> b6
```
can we move n = 2

:::

::: {.column}
```{mermaid}
%%{init: {"flowchart": {"htmlLabels": false}} }%%

graph TD
  b1[" n= 0"]
   p["preheader"]
   b3
   b4["n = 2"]
   b5
   b6
   b1-->p
   p--> b3
   b3--> b4
   b4--> b5
   b3--> b5
   b5--> b3
   b5--> b6
```
:::
::: 


all uses of the variable dest in the loop, must come from this instr
The basic block containing instr must execute every time around the loop


more  formally

1) the def must dominate all the uses 
1) no other defs of the same variable
1) def dominates all the loop exits 


## zero trip count loops 

```
   loop {
     if cond goto exit
     x = a*b 
       = x
   }
```

For cond 3 

if the loop runs zero times, a*b is never executed

We can remove this condition if the dest variable is dead after the loop or the instruction can not cause a exception, this is called ***speculative*** exceptions.


## How about an example:


```{mermaid}
%%{init: {"flowchart": {"htmlLabels": false}} }%%
    graph  LR;
B1["B1:
     1: b = 2
     2: i = 1"]

B2["b2:
   i lessthen 100"]
B3["B3:
   3: a = b+1
   4: c = 2
   i mod 2 == 0"]
B4["b4: 
    5: d = a + d 
    6: e = 1 +d"]
B5["B5:
    7: d= -c
    8: f = 1+a"]
B6["B6:
  9: i = i + 1
     a lessthen 2"]
Entry --> B1
B1--> B2
B2 -- y -->exit;
B2 --n --> B3
B3 --y --> B4
B3 --n --> B5
B4--> B6
B5 --> B6
B6 --y --> exit
B6 --n --> B2
```

steps 

:::{.r-stack}

::: {.fragment .fade-in-then-out}
1) create pre header 

:::

::: {.fragment  .fade-in-then-out }
1) b2.1 not loop invar (i < 100) i reached by def outside of loop


:::

::: {.fragment  .fade-in-then-out }
1) b3.3 loop inv ( a = b+1) b only def outside of the loop

:::

::: {.fragment  .fade-in-then-out }
1) b3.4 loop inv (c =2) 2 is a constant 

:::

::: {.fragment  .fade-in-then-out }
1) b3.cond (i mod 2 ==0 ) not loop inv

:::

::: {.fragment  .fade-in-then-out }
1) b4.5 (d = a +d ) not loop inv a is but not d 

:::

::: {.fragment  .fade-in-then-out }
1) b4.6 (e = 1 + d ) not loop inver
:::

::: {.fragment  .fade-in-then-out }
1) b5.7 (d = -c ) not loop inv other def of d 

:::

::: {.fragment  .fade-in-then-out }
1) b5.8 (f = 1 +a)  loop invar 

:::

::: {.fragment  .fade-in-then-out }
1) b6.9 not loop inv 
:::

::: {.fragment  .fade-in-then-out }
1) b6.cond  loop inv 

:::

::: {.fragment  .fade-in-then-out }
changed two instructions to loop invar

:::

::: {.fragment  .fade-in-then-out }
repeat 

:::

:::

--- 

# possible to move 

1. a = b +1 
1. f = 1 + a 
1. a < 2 


If we forward propagate values we could find a = 3, is a < 2 is always false and loop does not repeat  

moving the instructions out of the loop reduces the number of instructions which is good, but it also extends life times and therefore register pressure which is bad. 