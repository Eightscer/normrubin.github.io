---
title: "05 loop invariant code motion "
format: html
---

Loop invariant code motion recognizes computations in loop that produce the same value on each iteration  and moves them out of the loop.

A very common case for this is matrix addressing 

a[i,j] might expand to  to i*4*stride_a1 + j *4 


```
for j 
  a[i,j] = f(a[i.j+1])
```



```
a = 
b = 
result = 0
for (){
    result += a*b
}
```

if we are going to move code we need a kind of landing pad called a ***pre-header***
create a new block b.  change all the preds of the loop header to point to the preheader, add an edge from b to the loop header

We need two steps:

1) find loop invariant instructions, 
2) move all the loop invariant instructions to the preheader 

An instruction instr in a loop is loop invariant of:

every operand is:

1) constant or 
1) all reaching definitions of this operand are outside of the loop
1) there is exactly one def in loop reaching this operand and that def is loop invariant 


```
iterate to convergence
 for each instr in  the loop
  mark it at li iff 
     for all arguments x either
         all reaching defs of x are outside of the loop (this covers constants)
         or there is exactly one def of instr in the loop and that def is loop invar
```

when is ok to move an instr? We call this ***safe*** to move.

```
loop
  = x
x = a*b 
```

1) the def must dom all the uses 
1) no other defs of the same variable
1) def dominates all the loop exits 

```
   loop {
     if cond goto exit
     x = a*b 
       = x
   }
```

For cond 3 

if the loop runs zero times, a*b is never executed

We can remove this condition if the dest variable is dead after the loop or the instruction can cause a exception, this is called ***speculative*** exceptions.


How about an example:

```{mermaid}
    graph TD;
B1[" B1:
      1: b = 2
      2: i = 1"]
B2["b2:
   i < 100"]
B3["B3:
   3: a = b+1
   4: c = 2
   i mod 2 == 0"]
B4["b4: 
    5: d = a + d 
    6: e = 1 +d"]
B5["B5:
    7: d= -c
    8: f = 1+a"]
B6["B6:
  9: i = i + 1
     a < 2"]
Entry --> B1
B1--> B2
B2 -- y -->exit;
B2 --n --> B3
B3 --y --> B4
B3 --n --> B5
B4--> B6
B5 --> B6
B6 --y --> exit
B6 --n --> B2

```

steps:

1) create pre header 
1) b2.1 not loop invar
1) b3.1 loop inv 
1) b3.2 loop inv
1) b3.3 not loop inv
1) b4.1 not loop inv
1) b4.2 not loop inv 
1) b5.1 not loop inv other def of d 
1) b5.2 loop invar
1) b6.1 not loop inv 
1) b6.2 loop inv 
change = 2
repeat 

```{mermaid}
    graph TD;
B1[" B1:
      1: b = 2
      2: i = 1"]
B2["b2:
   i < 100"]
B3["B3:
   i mod 2 == 0"]
B4["b4: 
    5: d = a + d 
    6: e = 1 +d"]
B5["B5:
    7: d= -c
"]
B6["B6:
  9: i = i + 1
     t"]
pre["pre:
   3: a = b+1
      4: c = 2
        8: f = 1+a
        t = a < 2"]
Entry --> B1
B1--> pre
pre --> B2
B2 -- y -->exit;
B2 --n --> B3
B3 --y --> B4
B3 --n --> B5
B4--> B6
B5 --> B6
B6 --y --> exit
B6 --n --> B2

```


If we forward propagate values we could find a = 3, f = 3, t = false, and since t is false there is no loop

moving the instructions out of the loop reduces the number of instructions which is good, but it also extends life times and therefore register pressure which is bad. 