---
title: "5 Global Analysis"
format: html
---

## all kinds of graph properties -

We are going to define assorted graph properties, that can be calculated on cfgs.

In data flow we talked about a matrix all_defs x all_uses which is very sparse and very slow to process.
One way to speed it up, is use-def chains, for each use build a list of all defs that might reach that use. Or we could have def-use chains for each def calculate the set of all uses that the def might reach.    Both of these are good, but we are going use a much better data structure that is both smaller and faster to process. We also want ways to talk about loops in programs, since optimizations that move instructions inside loops to a place outside loops often speed up programs 



We first define a binary relation on cfg nodes, called ***dominance***. a node d dominates a node i (d dom i) if every possible execution path in the cfg that goes from the entry to i goes through d.   

1) Dom is reflexive, so a dom a for all nodes a. 
2) Dom is transitive, a dom b, b dom c ==> a dom c 
3) Dom is anti-symmetric  if a dom b, and b dom a then b = a 


We next define ***immediate dominators*** a idom b, a != b and there is no c != a and c != b where a dom c and c dom b. 

1) idom is unique
1) idom forms a tree  called the ***dominator tree***, root is the entry of the cfg

A ***strict dominator*** a sdom b if a dom b and a != b


A control flow graph

```{mermaid}
graph TD;
n0 --> n1;
n1 --> n2;
n1 --> n3;
n2 --> n4;
n3 --> n4;
```

The dominator tree

```{mermaid}
graph TD;
n0 --> n1;
n0 --> n2;n0 --> n3
n1 --> n4;
```

dominators

1) n0 dominates n0, n1, n2, n3 and n4
1) n1 dominates n1, n2, n3 and n4
1) n2 dominates n2
1) n3 dominates n3
1) n4 dominates n4

immediate dominators 

1) n0 idom n1
2) n0 idom n1
1) n3 idom n3
1) n1 idom n4

a simple implementation

$$
\begin{gathered}
\operatorname{Dom}\left(n_o\right)=\left\{n_o\right\} \\
\operatorname{Dom}(n)=\{n\} \cup\left(\bigcap_{p \in \operatorname{preds}(n)} \operatorname{Dom}(p)\right)
\end{gathered}
$$ 

To find the dominators of a node, first put the node itself in the dominators set. Then, take all the common (i.e. intersection) dominators of its predecessors and put them in the set.

What order do we want to process the nodes?


```
compute_dominators(CFG cfg) {
  cfg[0].dominators = {0}
  for (bb in cfg except 0) {
    b.dominators = {all nodes in cfg}
  }

  do {
    change = false;
    for (bb in cfg except 0) {
      temp = {all nodes in cfg}
      for (pred in bb.predecessors) {
        temp = intersect(temp, pred.dominators)
      }
      temp = union(temp, {bb})
      if (temp != bb.dominators) {
        change = true
        bb.dominators = temp
      }
    }
  } while (change);
}
```

How do we implement this 

number the vertices starting at 0, vertices are 0,1,2, number_of_vertices -1 
so we could use a bit-vector for the set, and we should process vertices in reverse post order 

[Cooper, Harvey, Kennedy Algorithm](https://www.cs.tufts.edu/comp/150FP/archive/keith-cooper/dom14.pdf)

if we have the dominator tree, finding immediate dominators is easy, its the parent of the node
Finding dominators is also easy, its all the parents  on the path from the entry to the node

suppose we have a node in the cfg with two parents, like n4,  if we takes paths backward in the dominator tree  the first common ancestor is n1, Which is the dominator 

lets look at a more complex example

```{mermaid}
graph TD;
n0 --> n5;
n0 --> n1;
n5 --> n7;
n5 --> n6;
n1 --> n2 ;
n1 --> n3;
n7 --> n8;
n6 --> n4;
n2 --> n4;
n4 --> n8 ;
n3 --> n8;
```

lets look at a more complex example

```{mermaid}
graph TD;
n0 --> n5;
n0 --> n1;
n5 --> n7;
n5 --> n6;
n1 --> n2 ;
n1 --> n3;
n7 --> n8;
n6 --> n4;
n2 --> n4;
n4 --> n8 ;
n3 --> n8;
```

subproblem: find lowest common ancestor of two nodes a and b

for each node in the dom tree we have the depth, how far from the root, so if a and b have the same parent, that is  the dominator, otherwise move the node with the higher depth up one 

a fast way to determine which node is lower 
the nodes in post order,  nodes at the top of the cfg have higher numbers 

```
void compute_dominators(CFG cfg) {
  // Some initialization steps and e.g. get postorder.

  // Map its basic block to its postorder traversal.
  foreach (p ; postorder) {
    postorder_map[p] = counter;
    ++counter;
  }

  bool change;
  do {
    change = false;
    foreach_reverse (int i; postorder) {
      BasicBlock *bb = &cfg[i];
      int new_idom = bb.preds[0];  // Arbitrarily choose the first predecessor
      foreach (pred ; bb.preds[1..bb.preds.length]) {
        if (cfg.idoms[pred] != CFG.UNDEFINED_IDOM) {
          new_idom = intersect(new_idom, pred, cfg.idoms, postorder_map);
        }
      }
      if (cfg.idoms[i] != new_idom) {
        cfg.idoms[i] = new_idom;
        change = true;
      }
    }
  } while (change);
}

int intersect(int b1, int b2, Array!int idoms, Array!int postorder_map) {
  while (b1 != b2) {
    if (postorder_map[b1] < postorder_map[b2]) {
      b1 = idoms[b1];
    } else {
      b2 = idoms[b2];
    }
  }
  return b1;
  ```


  A node A has a  ***dominance frontier*** which are set of nodes b where A does not dominate b but A dominates a pred of b.  Lets see n5' dominance frontier 

  Finally we have a ***post dominates*** b if all paths from b to the exit go through a. for instance n4 post dominates n6. 

  ## natural loops

  ```{mermaid}
  graph TD;
  entry --> loop
  loop --> if 
  if --> then
  if --> else
  then --> endif
  else --> endif
  endif --> loop
  loop --> exit
  ```

  conditions for a natural loop:

  1) has to have a cycle in cfg (strongly connected)
  1) single entry point (called the **header** ) header

  How about an example of a cycle that has a cycle and no header

  ```{mermaid}
    graph TD;
    entry --> if;
    if --> loop1
    if --> loop2
    loop2 --> loop1
loop1 --> loop2
```

This loop has two entry points.  


define a ***backedge***  is an edge A->B, where B dominates A 

other edges are forward edges 

Natural loops:

1) for a backedge A->B,  B is the header of the loop
1) the smallest set of vertices L including A and B, such that for all v in L either preds(v) are in L or v == B

Lets see what this means for nested loops 

```{mermaid}
    graph TD;
    entry --> H1
    H1 --> A
    A --> H2
    H2 --> B
    B --> H2
    B --> H1
    H1 --> exit
```


Backedges  B -> H2, and B-> H1

for B-> H2, loop is H2,
for B-> H1, loop is H1, A, H2, B 

*** reducible control flow *** 
in a reducible cfg every back edge has a natural loop.

A reducible CFG is one with edges that can be partitioned into two disjoint sets: forward edges, and back edges, such that:

Forward edges form a directed acyclic graph with all nodes reachable from the entry node.

For all back edges (A, B), node B dominates node A.


Structured programming languages are often designed such that all CFGs they produce are reducible, and common structured programming statements such as IF, FOR, WHILE, BREAK, and CONTINUE produce reducible graphs. To produce irreducible graphs, statements such as GOTO are needed. Irreducible graphs may also be produced by some compiler optimizations.



loop has two entry p

Where did the name come from:

T1 and T2 transforms 


T1: Let G be a CFG. Suppose n is a node in G with a self-loop, that is, an edge from n to itself.

Transformation T1 on node n is removal of this self-loop.

T2: Let n1 and n2 be nodes in G such that n2 has the unique direct ancestor n1, and n2 is not
the initial node. Then transformation T2 on node pair (n1,n2) is merging nodes n1 and n2
into one node, named n1/n2, and deleting the unique edge between them


    int  n = (count + 7) / 8;
    switch (count % 8) {
    case 0: do { *to = *from++;
    case 7:      *to = *from++;
    case 6:      *to = *from++;
    case 5:      *to = *from++;
    case 4:      *to = *from++;
    case 3:      *to = *from++;
    case 2:      *to = *from++;
    case 1:      *to = *from++;
            } while (--n > 0);
    }

simplified control flow 

```{mermaid}
    graph TD;
    entry --> switch;
    switch --> case0-7
    switch --> case1
    switch --> case2
    case0-7 --> case2
    case2--> case1
    case1 --> dowhile
    dowhile --> case0-7
    dowhile --> exit
```



```{mermaid}
    graph TD;
    entry --> switch;
    switch --> case1
    switch --> case2
    case2--> case1
    case1 --> dowhile
    dowhile --> switch
    dowhile --> exit
```

the argument about no goto's is really an argument about reducible control flow 


